/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package encryptionandstegnography;

import static encryptionandstegnography.TextEncryption.image;
import java.awt.Color;
import java.io.BufferedWriter;
import java.io.File;
import java.util.Random;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author gowthamd
 */
public class EmbeddInPic extends javax.swing.JFrame {

    /**
     * Creates new form TextEncryption2
     */
    String pixelPos[] = new String[3000];
    String orderedPixelPos[] = new String[3000];
    public EmbeddInPic() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton2 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jButton3 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(153, 153, 255));

        jButton1.setText("Generate Random Pixels in pic., equal to hiding text");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Generated Random Pixels of pic:");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jButton2.setText("Sort these random pixels of pic.,");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel2.setText("Sorted Random Pixels of Pic:");

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane2.setViewportView(jTextArea2);

        jButton3.setText("Embedd encrypted text in pic.,");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel3.setText("Image after text embedded:");

        jLabel4.setText("pic");

        jButton4.setText("Save Image");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel5.setText("<<Home Screen");
        jLabel5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel5MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(77, 77, 77)
                        .addComponent(jButton1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(234, 234, 234)
                        .addComponent(jButton2))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 421, Short.MAX_VALUE)
                            .addComponent(jScrollPane2)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(235, 235, 235)
                        .addComponent(jButton3)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(79, 79, 79)
                .addComponent(jLabel3)
                .addGap(64, 64, 64)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 80, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton4)
                    .addComponent(jLabel5))
                .addGap(43, 43, 43))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addComponent(jButton1)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(59, 59, 59)
                        .addComponent(jLabel1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(34, 34, 34)
                .addComponent(jButton2)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(56, 56, 56)
                        .addComponent(jLabel2))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(27, 27, 27)
                .addComponent(jButton3)
                .addGap(34, 34, 34)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel3))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton4)
                        .addGap(54, 54, 54)
                        .addComponent(jLabel5)
                        .addGap(40, 40, 40)))
                .addGap(20, 76, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jLabel5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel5MouseClicked
        // TODO add your handling code here:
        this.dispose();
        new TextHomeScreen().call();
    }//GEN-LAST:event_jLabel5MouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        System.out.println("height:"+TextEncryption.height+" width:"+TextEncryption.width);
        
        String pixelPosString = "";
        
        for(int i=0;i<TextEncryption.encryptedText.length();i++)
        {
            pixelPos[i] = generateRandomDistinctPixel(pixelPos,i);
            if(i%5 == 0)
            {
                pixelPosString+="\n"+pixelPos[i];
            }
            else
                pixelPosString+="\t"+pixelPos[i];
        }
        
        System.out.println("Random pixels are:");
        for(int i=0;i<=TextEncryption.encryptedText.length()-1;i++)
        {
            System.out.println(i+" -> "+pixelPos[i]);
        }
        
        jTextArea1.setText(pixelPosString);
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        
        int distinctRows[]=new int[100];
        int distinctCols[]=new int[100];
        int rowCount =0,colCount =0;
        for(int i=0;i<TextEncryption.encryptedText.length();i++)
        {
            String pix[] = pixelPos[i].split(",");
            if(rowCount == 0)
            {
                distinctRows[rowCount] = Integer.parseInt(pix[0].trim());
                rowCount++;
            }
            else
            {
                boolean found = false;
                for(int j=0;(j<rowCount);j++)
                {
                    if(distinctRows[j]==Integer.parseInt(pix[0].trim()))
                    {
                        found = true;
                        break;
                    }
                }
                if(!found)
                {
                    distinctRows[rowCount++] = Integer.parseInt(pix[0].trim()); 
                }
            }
            
            if(colCount == 0)
            {
                distinctCols[colCount] =  Integer.parseInt(pix[1].trim());
                colCount++;
            }
            else
            {
                boolean found = false;
                for(int j=0;(j<colCount);j++)
                {
                    if(distinctCols[j]==Integer.parseInt(pix[1].trim()))
                    {
                        found = true;
                        break;
                    }
                }
                if(!found)
                {
                    distinctCols[colCount++] = Integer.parseInt(pix[1].trim()); 
                }
            }
        }
        
        System.out.println("distinct Rows:");
        
        for(int i=0;i<=rowCount-1;i++)
        {
            System.out.print("\t "+distinctRows[i]);
        }
        System.out.println("distinct Cols:");
        
        for(int i=0;i<=colCount-1;i++)
        {
            System.out.print("\t "+distinctCols[i]);
        }
        
        int count =0;
        
        String orderedPixelsString = "";
        
        //need to sort those distict Rows and distinct columns
        int minpos=0;
        for(int i=0;i<=rowCount-1;i++)
        {
            int min = distinctRows[i];
            minpos = i;
            for(int j=i+1;j<=rowCount-1;j++)
            {
                if(min > distinctRows[j])
                {
                    min = distinctRows[j];
                    minpos = j;
                }
            }
            distinctRows[minpos] = distinctRows[i];
            distinctRows[i] = min;
            
            System.out.println("r: "+min);
        }
        
        for(int i=0;i<=colCount-1;i++)
        {
            int min = distinctCols[i];
            minpos = i;
            for(int j=i+1;j<=colCount-1;j++)
            {
                if(min > distinctCols[j])
                {
                    min = distinctCols[j];
                    minpos = j;
                }
            }
            distinctCols[minpos] = distinctCols[i];
            distinctCols[i] = min;
            
            System.out.println("c: "+min);
        }
        
        for(int i=0;i<=rowCount-1;i++)
        {
            for(int j=0;j<=colCount-1;j++)
            {
                String pixelStr = distinctRows[i]+","+distinctCols[j];
                boolean found = false;
                for(int k=0;k<=TextEncryption.encryptedText.length()-1;k++)
                {
                    if(pixelPos[k].trim().equals(pixelStr))
                    {
                        found = true;
                        break;
                    }
                    
                }
                if(found)
                {
                    orderedPixelPos[count++] = pixelStr;
                    
                    if(count%5 == 0)
                           orderedPixelsString+= "\n"+pixelStr;
                    else
                           orderedPixelsString+= "\t"+pixelStr;
                }
            }
        }
        
        jTextArea2.setText(orderedPixelsString);
       
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        
        //BufferedImage modifiedImage = new BufferedImage(m,m,BufferedImage.TYPE_INT_RGB);
        for(int i=0;i<TextEncryption.encryptedText.length();i++)
        {
                String pixelString = orderedPixelPos[i];
                int charVal = (int)TextEncryption.encryptedText.charAt(i);
                String pixelPos[] = pixelString.split(",");
                int pixelWidthPos = Integer.parseInt(pixelPos[0]); 
                int pixelHeightPos = Integer.parseInt(pixelPos[1]);
                
                Color color = new Color(image.getRGB(pixelWidthPos, pixelHeightPos));
                int red = color.getRed();
                int green = color.getGreen();
                int blue = color.getBlue();
                if((red>150) || (green>150) || (blue>150))
                {
                    red = (red+charVal)%256;
                    green = (green+charVal)%256;
                    blue = (blue+charVal)%256;
                }
                else
                {
                    red = (red-charVal);
                    if(red<=0)
                        red = 255 + red;
                    green = (green-charVal);
                    if(green<=0)
                        green = 255 + green;
                    blue = (blue-charVal);
                    if(blue<=0)
                        blue = 255 + blue;
                }
                                
                int val = (65536 * red + 256 * green + blue);
                image.setRGB(pixelWidthPos, pixelHeightPos, val);
               
        }
        
        jLabel4.setIcon(new ImageIcon(image));
        
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
          try
        {
            JFileChooser fc=new JFileChooser();
            int returnVal=fc.showSaveDialog(this);
            if(returnVal==JFileChooser.APPROVE_OPTION)
            {
               java.io.File saved_file=fc.getSelectedFile();
               String file_name=saved_file.toString();
              //  JOptionPane.showMessageDialog(null, file_name);
                BufferedWriter bw;
                File file;
                 file = new File(saved_file.getAbsolutePath());
                ImageIO.write(image,"png",file);
                JOptionPane.showMessageDialog(null, "Image saved successfully");
               // bw.write("toadd");
              //  FileWriter fw=new FileWriter(saved_file.getAbsoluteFile());
             //bw=new BufferedWriter(fw);
            }
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null,"Exception raised in saving Image");
        }
        
    }//GEN-LAST:event_jButton4ActionPerformed

    public String generateRandomDistinctPixel(String pixelPos[], int lengthOfAry)
    {
        Random randomGenerator = new Random();
        boolean isDistinct = false;
        String pixelPosition = "";
        do
        {
            
            int randRow = randomGenerator.nextInt(TextEncryption.height);
            int randCol = randomGenerator.nextInt(TextEncryption.width);
            boolean found = false;
            for(int i=0;i<=(lengthOfAry-1);i++)
            {
                if(pixelPos.length != 0)
                {
                if(pixelPos[i].trim().equals((randRow+","+randCol).trim()))
                {
                    found = true;
                    
                }
                }
            }
            
            if(found) continue;
            else
            {
                pixelPosition = (randRow+","+randCol).trim();
                break;
            }    
            
        }while(true);
        
        return pixelPosition;
    }
    
    
    /**
     * @param args the command line arguments
     */
    public void call() {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EmbeddInPic.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EmbeddInPic.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EmbeddInPic.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EmbeddInPic.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EmbeddInPic().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    // End of variables declaration//GEN-END:variables
}
